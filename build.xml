<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. --><project basedir="." default="build" name="JunitReport">
    <property environment="env"/>
    <property name="junit.output.dir" value="junit"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.5"/>
    <property name="source" value="1.5"/>
    
    <property name="main.build.dir" value="build/main"/>
    <property name="main.src.dir" value="src/main/java"/>
    <property name="test.build.dir" value="build/test"/>
    <property name="test.src.dir" value="src/test/java"/>
    <property name="target.report.dir" value="build/report"/>
    
    <path id="Maven Dependencies.libraryclasspath">
        <pathelement location="../../.m2/repository/junit/junit/4.11/junit-4.11.jar"/>
        <pathelement location="../../.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar"/>
        <pathelement location="../../.m2/repository/junit/junit-dep/4.8.2/junit-dep-4.8.2.jar"/>
        <pathelement location="../../.m2/repository/org/hamcrest/hamcrest-all/1.3/hamcrest-all-1.3.jar"/>
    </path>
    <path id="classpath.test">
        <pathelement location="../../.m2/repository/junit/junit/4.11/junit-4.11.jar"/>
        <pathelement location="../../.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar"/>
        <pathelement location="../../.m2/repository/junit/junit-dep/4.8.2/junit-dep-4.8.2.jar"/>
        <pathelement location="../../.m2/repository/org/hamcrest/hamcrest-all/1.3/hamcrest-all-1.3.jar"/>
        <pathelement location="${main.build.dir}"/>
    </path>
    <path id="JunitReport.classpath">
        <pathelement location="target/classes"/>
        <pathelement location="target/test-classes"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.ReportTest.classpath">
        <path refid="JunitReport.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <path id="run.JunitReport.classpath">
        <path refid="JunitReport.classpath"/>
        <path refid="Maven Dependencies.libraryclasspath"/>
    </path>
    <target name="init">
        <mkdir dir="target/classes"/>
        <mkdir dir="target/test-classes"/>
        <copy includeemptydirs="false" todir="target/classes">
            <fileset dir="src/main/java">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy includeemptydirs="false" todir="target/test-classes">
            <fileset dir="src/test/java">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete dir="target/classes"/>
        <delete dir="target/test-classes"/>
    </target>
    <target depends="clean" name="cleanall"/>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects"/>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="target/classes" includeantruntime="false" source="${source}" target="${target}">
            <src path="src/main/java"/>
            <classpath refid="JunitReport.classpath"/>
        </javac>
        <javac debug="true" debuglevel="${debuglevel}" destdir="target/test-classes" includeantruntime="false" source="${source}" target="${target}">
            <src path="src/test/java"/>
            <classpath refid="JunitReport.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
        <copy todir="${ant.library.dir}">
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </copy>
        <unzip dest="${ant.library.dir}">
            <patternset includes="jdtCompilerAdapter.jar"/>
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </unzip>
    </target>
    <target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        <antcall target="build"/>
    </target>
    <target name="ReportTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="JunitReport.JunitReport.ReportTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.ReportTest.classpath"/>
        </junit>
    </target>
    <target name="JunitReport">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="JunitReport.JunitReport.AppTest" todir="${junit.output.dir}"/>
            <test name="JunitReport.JunitReport.ReportTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="run.JunitReport.classpath"/>
        </junit>
    </target>
    <target name="junitreport">
        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.output.dir}"/>
        </junitreport>
    </target>
    <target name="compile">
    <mkdir dir="${main.build.dir}"/>
    <javac srcdir="${main.src.dir}" destdir="${main.build.dir}" includeantruntime="false"/>
  </target>
  <target name="test-compile" depends="compile">
    <mkdir dir="${test.build.dir}"/>
    <javac srcdir="${test.src.dir}" destdir="${test.build.dir}" includeantruntime="false">
        <classpath refid="classpath.test"/>
    </javac>
  </target>
  <target name="test" depends="test-compile">
    <junit printsummary="on" haltonfailure="no" fork="true">
        <classpath>
          <path refid="classpath.test"/>
          <pathelement location="${test.build.dir}"/>
        </classpath>
        <formatter type="brief" usefile="false" />
        <batchtest todir="${target.report.dir}">
            <fileset dir="${test.src.dir}" includes="**/*Test.java" />
        </batchtest>
    </junit>
  </target>
  <target name="report" depends="test">
        <mkdir dir="${target.report.dir}/html"/>
        <junitreport todir="${target.report.dir}">
            <fileset dir="${target.report.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report todir="${target.report.dir}/html"/>
        </junitreport>
    </target>
</project>
